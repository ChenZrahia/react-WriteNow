import React, { Component } from 'react';
import {
  AppRegistry,
  AsyncStorage,
  Image,
  Platform,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  TouchableOpacity,
  TouchableHighlight,
  View,
  TextInput
} from 'react-native';
import InitRout from './src/InitRout';
import ChatRoom from './src/ChatRoom/ChatRoom';
import emoji from 'emoji-datasource';

var serverSrv = require('./Services/serverSrv');
var PushNotification = require('react-native-push-notification');

// var EncryptionUtil = require('writenow-rsa');

// setTimeout(function () {
//   EncryptionUtil.test((result) => {
//     console.log("result");
//     console.log(result);
//   });

//   ReactNativeRSAUtil.encryptStringWithPrivateKey("content", `-----BEGIN RSA PRIVATE KEY-----
// MIIBOAIBAAJAXr3Li0mGG76UPuI2JE1Nf0z0Y8mgMh/NiqtzbhhP4IJouNDFZK5k
// dk4sj1FciPsJ/TDI2a1Dixzc7Z4XxQmU0QIDAQABAkBX3y9XnDT/rK6w+H0BBJXZ
// eZW+q/aiJu8sK8NfHLuRXiDbC2rgBBLi6cQb1VGEWk8JccXGxWtokZorO6x4/N3x
// AiEAq9L8CaMQYFc3aGKstenmhNwqGsJqfACgHEuJpOatYG0CIQCNJ51PP2q7dqyS
// U/b6ITSj1z2CbWHgfHInL3ihZSqvdQIgWpqQqIxB0GttHjAaHnrOQXTPBvlJqUWz
// J/h1Bm1VMykCIFDRVKUyBxcsPGRPhMHzzyLbstEBdZ/FQMqkyGmH9eedAiA/1VRE
// AHFqyHZtM2qS45D3RjiVSRn2wU3i85lIQ3rA8Q==)
// -----END RSA PRIVATE KEY-----`)
//     .then((error, data) => {
//       console.log(data);
//       if (!error) {
//         console.log(data);
//       }
//     });
//}, 1000);



//import ReactNativeRSAUtil from 'react-native-rsa-util';

// var JSEncrypt = require('./jsencrypt').JSEncrypt;

// var t = new JSEncrypt();
// console.log(t);


export default class WriteNow extends Component {
  constructor() {
    super();
  }

  componentWillMount() {
    serverSrv.login();
  }

  componentDidMount() {
    PushNotification.configure({

      popInitialNotification: (notification) => {
                // when app is entirely closed and click on push notification
                console.log('received', notification);

                PushNotification.localNotification(notification);
            },

      // (optional) Called when Token is generated (iOS and Android)
      onRegister: function (token) {
        console.log('TOKEN:', token);
      },

      // (required) Called when a remote or local notification is opened or received
      onNotification: function (notification) {
        console.log('NOTIFICATION:', notification);
        try {
          PushNotification.localNotification({
            /* Android Only Properties */
            id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            ticker: "My Notification Ticker", // (optional)
            autoCancel: true, // (optional) default: true
            largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
            subText: "This is a subText", // (optional) default: none
            color: "red", // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: 'some_tag', // (optional) add tag to message
            group: "group", // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification

            title: "רוגבין, רוגבין", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
            message: "שומע? עבור", // (required)
            playSound: true, // (optional) default: true
            number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
          });
        } catch (error) {

        }
      },

      // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications) 
      senderID: "486059628270",

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
        * (optional) default: true
        * - Specified if permissions (ios) and token (android and ios) will requested or not,
        * - if not, you must call PushNotificationsHandler.requestPermissions() later
        */
      requestPermissions: true,
    });



  }

  render() {
    return (
      <View style={styles.container}>
        <StatusBar
          backgroundColor="#820cf7"
          animated={true}
          />
        <InitRout />
      </View>
    );
  }
}

// <StatusBar barStyle="light-content" />
// <View style={styles.statusbar} />
// <InitRout />

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  example: {
    elevation: 4,
  },
  statusbar: {
    backgroundColor: '#820cf7',
    height: Platform.OS === 'ios' ? 20 : 24,
  },
  appbar: {
    flexDirection: 'row',
    alignItems: 'center',
    height: Platform.OS === 'ios' ? 44 : 56,
    backgroundColor: '#9933FF',
    elevation: 4,
  },
  title: {
    flex: 1,
    margin: 16,
    textAlign: Platform.OS === 'ios' ? 'center' : 'left',
    fontSize: Platform.OS === 'ios' ? 20 : 18,
    color: '#fff',
  }
});

AppRegistry.registerComponent('WriteNow', () => WriteNow);